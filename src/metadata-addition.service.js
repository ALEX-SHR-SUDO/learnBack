// src/metadata-addition.service.js

// 1. –Ø–í–ù–´–ô –ò–ú–ü–û–†–¢ Buffer –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Node.js
import { Buffer } from 'buffer';

import {
    PublicKey, // Used inside addTokenMetadata
    SystemProgram, 
    Transaction, 
    sendAndConfirmTransaction, 
} from '@solana/web3.js';

// 2. –ò–°–ü–û–õ–¨–ó–£–ï–ú DEFAULT IMPORT –î–õ–Ø –ò–ù–°–¢–†–£–ö–¶–ò–ô –ò DataV2
import * as mplTokenMetadataPkg from '@metaplex-foundation/mpl-token-metadata';

// Check if exports are under .default property (CommonJS/ESM workaround)
const mplExports = mplTokenMetadataPkg.default || mplTokenMetadataPkg;

const {
    DataV2, 
    createCreateMetadataAccountV3Instruction,
} = mplExports;

import { getServiceKeypair, getConnection } from "./solana.service.js";


// üõë –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º PublicKey –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è.
// –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ.
const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6msK8P3vc');


/**
 * Creates the Metaplex Metadata Account for the token (using V3).
 * @param {string} mintAddressString Mint account address as a Base58 string
 * @param {string} name Token name
 * @param {string} symbol Token symbol
 * @param {string} uri Metadata URI
 * @returns {Promise<PublicKey>} Address of the Metadata Account PDA.
 */
export async function addTokenMetadata(mintAddressString, name, symbol, uri) {
    const serviceKeypair = getServiceKeypair();
    const connection = getConnection();
    const payer = serviceKeypair;

    let mintAddress; 

    // CRITICAL DEBUGGING BLOCK: Isolate the PublicKey creation failure
    try {
        console.log(`[DEBUG] –í—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–æ–∫–∞ Mint-–∞–¥—Ä–µ—Å–∞: ${mintAddressString}`);
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PublicKey –∑–¥–µ—Å—å –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
        mintAddress = new PublicKey(mintAddressString);
        console.log(`[DEBUG] –û–±—ä–µ–∫—Ç Mint PublicKey —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${mintAddress.toBase58()}`);

    } catch (e) {
        console.error(`[–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô DEBUG] –ù–ï –£–î–ê–õ–û–°–¨ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ Mint PublicKey: ${e.message}`);
        throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å Mint: ${mintAddressString}. –ü—Ä–∏—á–∏–Ω–∞: ${e.message}`);
    }

    console.log(`[–®–ê–ì 4] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${mintAddress.toBase58()}`);

    try {
        // --- 1. Get Metadata Account PDA address ---
        
        // üõë –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô DEBUG 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–µ—Ä–µ–¥ findProgramAddress
        console.log(`[DEBUG] –¢–∏–ø METADATA_PROGRAM_ID (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –º–æ–¥—É–ª—è): ${METADATA_PROGRAM_ID.constructor.name}`); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 'PublicKey'
        console.log(`[DEBUG] –¢–∏–ø mintAddress (—Å–æ–∑–¥–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏): ${mintAddress.constructor.name}`); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 'PublicKey'
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º .toBytes() –¥–ª—è —Å–∏–¥–æ–≤.
       const [metadataAddress] = await PublicKey.findProgramAddress( 
            [
                Buffer.from("metadata", "utf8"),
                METADATA_PROGRAM_ID.toBytes(), 
                mintAddress.toBytes(),         
            ],
            METADATA_PROGRAM_ID
        );
        
        console.log(`[DEBUG] –ê–¥—Ä–µ—Å PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω: ${metadataAddress.toBase58()}`);

        // --- 2. Define Metaplex DataV2 data ---
        const tokenData = new DataV2({
            name: name,
            symbol: symbol,
            uri: uri,
            sellerFeeBasisPoints: 0,
            creators: null,
            collection: null,
            uses: null,
        });

        // --- 3. Create V3 instruction ---
        // –ï—Å–ª–∏ PDA –≤—ã—á–∏—Å–ª–µ–Ω, –æ—à–∏–±–∫–∞ –ø–æ—á—Ç–∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –Ω–µ –∑–¥–µ—Å—å.
        const metadataInstruction = createCreateMetadataAccountV3Instruction(
            {
                metadata: metadataAddress,
                mint: mintAddress,
                mintAuthority: payer.publicKey,
                payer: payer.publicKey,
                updateAuthority: payer.publicKey,
                systemProgram: SystemProgram.programId, 
            },
            {
                createMetadataAccountArgsV3: { 
                    data: tokenData,
                    isMutable: true,
                    collectionDetails: null, 
                },
            }
        );

        // --- 4. Send transaction ---
        const transaction = new Transaction().add(metadataInstruction);

        const signature = await sendAndConfirmTransaction(
            connection,
            transaction,
            [payer] 
        );

        console.log(`‚úÖ [–®–ê–ì 4] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. Signature: ${signature}`);
        
        return metadataAddress;

    } catch (error) {
        // –ú—ã –ø–æ–π–º–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ findProgramAddress –∏–ª–∏ –≤ sendAndConfirmTransaction
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ addTokenMetadata:", error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${error.message}`);
    }
}
