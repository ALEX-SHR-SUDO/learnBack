// src/metadata-addition.service.js

import { 
    PublicKey, 
    Transaction, 
    sendAndConfirmTransaction,
    Keypair, // <-- –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø MINT
    SystemProgram, // <-- –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø MINT
    LAMPORTS_PER_SOL // <-- –î–û–ë–ê–í–õ–ï–ù–û
} from '@solana/web3.js'; 

// üõë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò ESM/CommonJS: 
// –ò—Å–ø–æ–ª—å–∑—É–µ–º import * as –¥–ª—è –ø–∞–∫–µ—Ç–∞ Metaplex, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è CJS.
import * as mplTokenMetadata from '@metaplex-foundation/mpl-token-metadata';

// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. 
const createCreateMetadataAccountV3Instruction = mplTokenMetadata.createCreateMetadataAccountV3Instruction || (mplTokenMetadata.default && mplTokenMetadata.default.createCreateMetadataAccountV3Instruction);
const findMetadataPda = mplTokenMetadata.findMetadataPda || (mplTokenMetadata.default && mplTokenMetadata.default.findMetadataPda);

// üõë –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ SPL-TOKEN –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê
import * as splToken from '@solana/spl-token';
const { 
    createMint, 
    createAssociatedTokenAccountInstruction, 
    createMintToInstruction,
    getAssociatedTokenAddressSync,
    TOKEN_PROGRAM_ID,
    MINT_SIZE
} = splToken;


import { getConnection, getServiceWallet } from './solana.service.js';
import { Buffer } from 'buffer';

// --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–°–¢–ê–ù–¢ ---

const DEFAULT_METADATA_PROGRAM_ID = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6z8BXgZay';
const METADATA_PROGRAM_ID_STRING = process.env.TOKEN_METADATA_PROGRAM_ID || DEFAULT_METADATA_PROGRAM_ID;
const TOKEN_METADATA_PROGRAM_ID = new PublicKey(METADATA_PROGRAM_ID_STRING); 
const DECIMAL_PLACES = 9; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è SPL —Ç–æ–∫–µ–Ω–æ–≤

/**
 * [–ü–†–ò–í–ê–¢–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø] –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex.
 * @param {PublicKey} mintPublicKey - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞.
 * @param {Keypair} payer - –ö–æ—à–µ–ª–µ–∫, –æ–ø–ª–∞—á–∏–≤–∞—é—â–∏–π –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—â–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
 * @param {Object} metadataDetails - –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (name, symbol, uri).
 * @returns {TransactionInstruction} –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
 */
function _createMetadataInstruction(mintPublicKey, payer, metadataDetails) {
    // 1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const [metadataAddress] = PublicKey.findProgramAddressSync(
        [
            Buffer.from("metadata"),
            TOKEN_METADATA_PROGRAM_ID.toBuffer(),
            mintPublicKey.toBuffer(),
        ],
        TOKEN_METADATA_PROGRAM_ID
    );
    
    console.log(`–ê–¥—Ä–µ—Å PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataAddress.toBase58()}`);
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const instruction = createCreateMetadataAccountV3Instruction(
        {
            metadata: metadataAddress,
            mint: mintPublicKey,
            mintAuthority: payer.publicKey,
            payer: payer.publicKey,
            updateAuthority: payer.publicKey,
        },
        {
            createMetadataAccountArgsV3: {
                data: {
                    name: metadataDetails.name,
                    symbol: metadataDetails.symbol,
                    uri: metadataDetails.uri,
                    sellerFeeBasisPoints: 0,
                    creators: null,
                    collection: null,
                    uses: null,
                },
                isMutable: true,
                collectionDetails: null,
            },
        },
        TOKEN_METADATA_PROGRAM_ID
    );
    
    return instruction;
}


/**
 * –°–û–ó–î–ê–ï–¢ –¢–û–ö–ï–ù MINT, –ß–ï–ö–ê–ù–ö–£–ï–¢ –ï–ì–û –ò –î–û–ë–ê–í–õ–Ø–ï–¢ –ú–ï–¢–ê–î–ê–ù–ù–´–ï METAPLEX.
 * @param {Object} tokenDetails - –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å name, symbol, uri, supply.
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∞–¥—Ä–µ—Å–æ–º –º–∏–Ω—Ç–∞.
 */
export async function createTokenAndMetadata(tokenDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    const mintKeypair = Keypair.generate(); // –ù–æ–≤—ã–π Keypair –¥–ª—è –º–∏–Ω—Ç–∞
    const mintPublicKey = mintKeypair.publicKey;
    
    console.log(`\n--- –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê –ò –ú–ï–¢–ê–î–ê–ù–ù–´–• ---`);
    console.log(`–ù–æ–≤—ã–π Mint Address: ${mintPublicKey.toBase58()}`);
    
    // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ–Ω—Ç –∏ –∞–¥—Ä–µ—Å –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–æ–∫–µ–Ω –ê–∫–∫–∞—É–Ω—Ç–∞ (ATA)
    const requiredRent = await connection.getMinimumBalanceForRentExemption(MINT_SIZE);
    
    // ATA –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞)
    const tokenAccountAddress = getAssociatedTokenAddressSync(
        mintPublicKey,
        payer.publicKey,
        false, 
        TOKEN_PROGRAM_ID
    );
    
    console.log(`ATA Address (Payer): ${tokenAccountAddress.toBase58()}`);

    // --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ô ---
    let instructions = [];
    
    // 1. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ Mint Account
    instructions.push(
        SystemProgram.createAccount({
            fromPubkey: payer.publicKey,
            newAccountPubkey: mintPublicKey,
            space: MINT_SIZE,
            lamports: requiredRent,
            programId: TOKEN_PROGRAM_ID,
        })
    );
    
    // 2. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mint Account
    instructions.push(
        createMint(
            connection,
            payer,
            mintPublicKey,
            payer.publicKey, // Mint Authority
            DECIMAL_PLACES,
            mintKeypair,
            TOKEN_PROGRAM_ID,
        )
    );
    
    // 3. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ ATA
    instructions.push(
        createAssociatedTokenAccountInstruction(
            payer.publicKey,
            tokenAccountAddress,
            payer.publicKey,
            mintPublicKey,
            TOKEN_PROGRAM_ID
        )
    );
    
    // 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ß–µ–∫–∞–Ω–∫–∞ (Mint)
    instructions.push(
        createMintToInstruction(
            mintPublicKey,
            tokenAccountAddress,
            payer.publicKey, // Mint Authority
            BigInt(tokenDetails.supply * (10 ** DECIMAL_PLACES)), // Amount in smallest unit
            [],
            TOKEN_PROGRAM_ID
        )
    );
    
    // 5. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex
    const metadataInstruction = _createMetadataInstruction(
        mintPublicKey, 
        payer, 
        tokenDetails
    );
    instructions.push(metadataInstruction);

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
        const tx = new Transaction().add(...instructions);
        
        // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è: Payer –∏ Mint Keypair (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞)
        const signature = await sendAndConfirmTransaction(
            connection,
            tx,
            [payer, mintKeypair], 
            { 
                commitment: "confirmed",
                skipPreflight: false,
            }
        );

        console.log(`‚úÖ –¢–æ–∫–µ–Ω –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–¥–ø–∏—Å—å: ${signature}`);
        return { 
            mintAddress: mintPublicKey.toBase58(),
            signature: signature 
        };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error);
        throw new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞/–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: " + error.message);
    }
}


/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Metaplex –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞.
 * * @param {string} mintAddress - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞.
 * @param {Object} metadataDetails - –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (name, symbol, uri).
 * @returns {Promise<string>} –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 */
export async function addTokenMetadata(mintAddress, metadataDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    
    console.log(`\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${mintAddress} ---`);
    
    const mintPublicKey = new PublicKey(mintAddress);
    
    // 1. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    const instruction = _createMetadataInstruction(mintPublicKey, payer, metadataDetails);

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
        const tx = new Transaction().add(instruction);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            tx,
            [payer], // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
            { 
                commitment: "confirmed"
            }
        );

        console.log(`‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–¥–ø–∏—Å—å: ${signature}`);
        return signature;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (error.message && error.message.includes('already been executed')) {
             throw new Error("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.");
        }
        
        throw new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Metaplex: " + error.message);
    }
}
