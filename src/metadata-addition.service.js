// src/metadata-addition.service.js

import { Buffer } from 'buffer';

import {
    PublicKey,
    SystemProgram, 
    Transaction, 
    sendAndConfirmTransaction, 
} from '@solana/web3.js';

// –ò–°–ü–û–õ–¨–ó–£–ï–ú DEFAULT IMPORT –î–õ–Ø –ò–ù–°–¢–†–£–ö–¶–ò–ô –ò DataV2
import * as mplTokenMetadataPkg from '@metaplex-foundation/mpl-token-metadata';

const mplExports = mplTokenMetadataPkg.default || mplTokenMetadataPkg;

const {
    DataV2, 
    createCreateMetadataAccountV3Instruction,
} = mplExports;

import { getServiceKeypair, getConnection } from "./solana.service.js";


const METADATA_PROGRAM_ID_STRING = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6msK8P3vc';


/**
 * –°–æ–∑–¥–∞–µ—Ç Metaplex Metadata Account –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º V3).
 * @param {string} mintAddressString –ê–¥—Ä–µ—Å Mint-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ Base58
 * @param {string} name –ò–º—è —Ç–æ–∫–µ–Ω–∞
 * @param {string} symbol –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
 * @param {string} uri URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<PublicKey>} –ê–¥—Ä–µ—Å Metadata Account PDA.
 */
export async function addTokenMetadata(mintAddressString, name, symbol, uri) {
    const serviceKeypair = getServiceKeypair();
    const connection = getConnection();
    const payer = serviceKeypair;

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ PublicKey –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    const mintAddress = new PublicKey(mintAddressString);
    const METADATA_PROGRAM_ID = new PublicKey(METADATA_PROGRAM_ID_STRING);

    console.log(`[–®–ê–ì 4] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${mintAddress.toBase58()}`);

    try {
        // --- 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ Metadata Account PDA ---
        
        // üõë –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ë–ê–ì: –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –¥–ª–∏–Ω—É
        const metadataProgramBytes = METADATA_PROGRAM_ID.toBytes();
        const mintAddressBytes = mintAddress.toBytes();
        
        console.log(`[DEBUG PDA] METADATA_PROGRAM_ID bytes length: ${metadataProgramBytes.length}`);
        console.log(`[DEBUG PDA] mintAddress bytes length: ${mintAddressBytes.length}`);


        // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ —Å–∏–¥—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ —è–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Buffer,
        // —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∏ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.
       const [metadataAddress] = await PublicKey.findProgramAddress( 
            [
                Buffer.from("metadata", "utf8"),
                // –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Uint8Array –≤ Buffer
                Buffer.from(metadataProgramBytes), 
                Buffer.from(mintAddressBytes),         
            ],
            METADATA_PROGRAM_ID
        );
        
        console.log(`[DEBUG PDA] –ê–¥—Ä–µ—Å PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω: ${metadataAddress.toBase58()}`);


        // --- 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Metaplex DataV2 ---
        const tokenData = new DataV2({
            name: name,
            symbol: symbol,
            uri: uri,
            sellerFeeBasisPoints: 0,
            creators: null,
            collection: null,
            uses: null,
        });

        // --- 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ V3 ---
        const metadataInstruction = createCreateMetadataAccountV3Instruction(
            {
                metadata: metadataAddress,
                mint: mintAddress,
                mintAuthority: payer.publicKey,
                payer: payer.publicKey,
                updateAuthority: payer.publicKey,
                systemProgram: SystemProgram.programId, 
            },
            {
                createMetadataAccountArgsV3: { 
                    data: tokenData,
                    isMutable: true,
                    collectionDetails: null, 
                },
            }
        );

        // --- 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        const transaction = new Transaction().add(metadataInstruction);

        const signature = await sendAndConfirmTransaction(
            connection,
            transaction,
            [payer] 
        );

        console.log(`‚úÖ [–®–ê–ì 4] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. Signature: ${signature}`);
        
        return metadataAddress;

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ addTokenMetadata:", error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –ª–∏–º–∏—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`);
    }
}
