// src/metadata-addition.service.js

import { 
    getServiceWallet, 
    getConnection, 
    getMetadataProgramId 
} from './solana.service.js';

import { 
    createAssociatedTokenAccountInstruction, 
    createInitializeMintInstruction, 
    getAssociatedTokenAddress, 
    MINT_SIZE,
    createMintToCheckedInstruction,
    createSetAuthorityInstruction,
    AuthorityType
} from '@solana/spl-token';

import { 
    Keypair, 
    SystemProgram, 
    Transaction, 
    sendAndConfirmTransaction,
    PublicKey
} from '@solana/web3.js';

// üõë –í–ê–ñ–ù–û: –î–õ–Ø –¢–û–ì–û –ß–¢–û–ë–´ –≠–¢–ò –°–¢–†–û–ö–ò –†–ê–ë–û–¢–ê–õ–ò, 
// –í–´ –î–û–õ–ñ–ù–´ –£–°–¢–ê–ù–û–í–ò–¢–¨: npm install @metaplex-foundation/mpl-token-metadata
// –ó–∞—Ç–µ–º –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã:
/*
import { 
    createCreateMetadataAccountV3Instruction, 
    PROGRAM_ID as METAPLEX_PROGRAM_ID,
    DataV2
} from '@metaplex-foundation/mpl-token-metadata';
*/

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbCKSMYyzJm64FbLqxTSeiM'); 

// ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ò–ú–ü–û–†–¢–ê METAPLEX, –ü–û–ö–ê SDK –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù
// –ï—Å–ª–∏ SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤—ã—à–µ.
const createCreateMetadataAccountV3Instruction = (accounts, args) => {
    console.error("‚ùå –û–®–ò–ë–ö–ê: Metaplex SDK –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞.");
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è SDK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
};
const METAPLEX_PROGRAM_ID = getMetadataProgramId();
// ------------------------------------------------------------------------


/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å Public Key –¥–ª—è –∞–¥—Ä–µ—Å–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (PDA).
 * @param {PublicKey} mint - Mint Public Key.
 * @returns {PublicKey}
 */
function getMetadataAddress(mint) {
    const METADATA_PROGRAM_ID = getMetadataProgramId(); 
    
    const [metadataAddress] = PublicKey.findProgramAddressSync(
        [
            Buffer.from("metadata"),
            METADATA_PROGRAM_ID.toBuffer(),
            mint.toBuffer(),
        ],
        METADATA_PROGRAM_ID
    );
    return metadataAddress;
}


/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex V3.
 * * @param {object} params - { mint, owner, name, symbol, uri }
 * @returns {object} - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∏–ª–∏ null) –∏ –∞–¥—Ä–µ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
 */
function createMetaplexInstruction(params) {
    const { mint, owner, name, symbol, uri } = params;
    
    const metadataAddress = getMetadataAddress(mint);

    // --- 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (DataV2) ---
    // –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ—Ç Metaplex.
    const dataV2 = {
        name: name,
        symbol: symbol,
        uri: uri,
        sellerFeeBasisPoints: 0,
        creators: [
            {
                address: owner,
                verified: true,
                share: 100
            }
        ],
        collection: null,
        uses: null
    };

    // --- 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
    // –ï—Å–ª–∏ Metaplex SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
    let ix = createCreateMetadataAccountV3Instruction(
        {
            metadata: metadataAddress,
            mint: mint,
            mintAuthority: owner,
            payer: owner,
            updateAuthority: owner,
            systemProgram: SystemProgram.programId,
            rent: SystemProgram.programId, // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ SystemProgram
        },
        {
            createMetadataAccountArgsV3: {
                data: dataV2,
                isMutable: true, // –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –±—É–¥—É—â–µ–º
                collectionDetails: null 
            }
        }
    );

    return { 
        metadataAddress: metadataAddress,
        ix: ix
    };
}


/**
 * 1. –°–æ–∑–¥–∞–µ—Ç Mint –∞–∫–∫–∞—É–Ω—Ç. 
 * 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ.
 * 3. –ß–µ–∫–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ ATA.
 * 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Authority –¥–ª—è —á–µ–∫–∞–Ω–∫–∏ –Ω–∞ null.
 * 5. –ü—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π).
 * * @param {object} tokenDetails - name, symbol, uri, supply, decimals.
 * @returns {object} - { mintAddress, ata, metadataTx }
 */
export async function createTokenAndMetadata(tokenDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    const { name, symbol, uri, supply, decimals } = tokenDetails;
    
    // --- –ü–û–î–ì–û–¢–û–í–ö–ê ---
    const mint = Keypair.generate();
    const owner = payer.publicKey;
    const amount = BigInt(supply);
    const decimalPlaces = parseInt(decimals, 10);
    
    const transaction = new Transaction();
    const signers = [payer, mint]; 

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (Mint Account)
    const lamports = await connection.getMinimumBalanceForRentExemption(MINT_SIZE);
    
    transaction.add(
        SystemProgram.createAccount({
            fromPubkey: owner,
            newAccountPubkey: mint.publicKey,
            space: MINT_SIZE,
            lamports,
            programId: TOKEN_PROGRAM_ID,
        })
    );

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mint
    transaction.add(
        createInitializeMintInstruction(
            mint.publicKey,
            decimalPlaces,
            owner, // Mint Authority
            owner, // Freeze Authority (–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å null)
            TOKEN_PROGRAM_ID
        )
    );
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ Associated Token Account (ATA) –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const associatedTokenAddress = await getAssociatedTokenAddress(
        mint.publicKey,
        owner,
        false, 
        TOKEN_PROGRAM_ID
    );

    transaction.add(
        createAssociatedTokenAccountInstruction(
            owner, // payer
            associatedTokenAddress,
            owner, // owner
            mint.publicKey, // mint
            TOKEN_PROGRAM_ID
        )
    );

    // 4. –ß–µ–∫–∞–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ ATA
    transaction.add(
        createMintToCheckedInstruction(
            mint.publicKey, 
            associatedTokenAddress,
            owner, // Mint Authority
            amount,
            decimalPlaces,
            [], 
            TOKEN_PROGRAM_ID
        )
    );
    
    // 5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Authority –¥–ª—è —á–µ–∫–∞–Ω–∫–∏
    transaction.add(
        createSetAuthorityInstruction(
            mint.publicKey,
            owner, // Current Authority
            AuthorityType.MintTokens,
            null, // New Authority (null = disable)
            [],
            TOKEN_PROGRAM_ID
        )
    );

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ —á–µ–∫–∞–Ω–∫–∞)
    const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        signers,
        { commitment: 'confirmed' }
    );
    
    const mintAddress = mint.publicKey.toBase58();

    // 7. –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
    const metadataTxSignature = await addTokenMetadata(mintAddress, { name, symbol, uri });

    return { 
        mintAddress: mintAddress, 
        ata: associatedTokenAddress.toBase58(),
        metadataTx: metadataTxSignature
    };
}


/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Metaplex –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É.
 * @param {string} mintAddress - Mint Public Key (Base58).
 * @param {object} metadata - name, symbol, uri.
 * @returns {string} - Transaction signature.
 */
export async function addTokenMetadata(mintAddress, metadata) {
    const connection = getConnection();
    const payer = getServiceWallet();
    const mint = new PublicKey(mintAddress);
    
    const { ix } = createMetaplexInstruction({
        mint,
        owner: payer.publicKey,
        ...metadata
    });

    if (!ix) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
        console.warn("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Metaplex –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Metaplex SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        return "Metadata_Not_Applied_No_Metaplex_SDK";
    }

    // –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—Ç.–µ. SDK –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º:
    const transaction = new Transaction().add(ix);
    
    const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [payer],
        { commitment: 'confirmed' }
    );
    
    return signature;
}
