// src/metadata-addition.service.js

import { 
    PublicKey, 
    Transaction, 
    sendAndConfirmTransaction 
} from '@solana/web3.js'; 

import { 
    createCreateMetadataAccountV3Instruction, 
    findMetadataPda
} from '@metaplex-foundation/mpl-token-metadata'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º mpl-token-metadata –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

import { getConnection, getServiceWallet } from './solana.service.js';
import { Buffer } from 'buffer'; // –ù—É–∂–µ–Ω –¥–ª—è findProgramAddressSync

// --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–°–¢–ê–ù–¢ ---

// üõë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò 'Invalid public key input' 
// 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Program ID, –µ—Å–ª–∏ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
//    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ new PublicKey().
const DEFAULT_METADATA_PROGRAM_ID = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6z8BXgZay';

// Line 21 (–∏–ª–∏ –æ–∫–æ–ª–æ —Ç–æ–≥–æ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–±–æ–π –ø—Ä–∏ –ø—É—Å—Ç–æ–π ENV):
const METADATA_PROGRAM_ID_STRING = process.env.TOKEN_METADATA_PROGRAM_ID || DEFAULT_METADATA_PROGRAM_ID;

const TOKEN_METADATA_PROGRAM_ID = new PublicKey(METADATA_PROGRAM_ID_STRING); 

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Metaplex –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞.
 * @param {string} mintAddress - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞.
 * @param {Object} metadataDetails - –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (name, symbol, uri).
 * @returns {Promise<string>} –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 */
export async function addTokenMetadata(mintAddress, metadataDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    
    console.log(`\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${mintAddress} ---`);
    
    const mintPublicKey = new PublicKey(mintAddress);
    
    // 1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º findProgramAddressSync –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Buffer
    const [metadataAddress] = PublicKey.findProgramAddressSync(
        [
            Buffer.from("metadata"),
            TOKEN_METADATA_PROGRAM_ID.toBuffer(),
            mintPublicKey.toBuffer(),
        ],
        TOKEN_METADATA_PROGRAM_ID
    );
    
    console.log(`–ê–¥—Ä–µ—Å PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataAddress.toBase58()}`);
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const instruction = createCreateMetadataAccountV3Instruction(
        {
            metadata: metadataAddress,
            mint: mintPublicKey,
            mintAuthority: payer.publicKey,
            payer: payer.publicKey,
            updateAuthority: payer.publicKey,
        },
        {
            createMetadataAccountArgsV3: {
                data: {
                    name: metadataDetails.name,
                    symbol: metadataDetails.symbol,
                    uri: metadataDetails.uri,
                    sellerFeeBasisPoints: 0,
                    creators: null,
                    collection: null,
                    uses: null,
                },
                isMutable: true,
                collectionDetails: null,
            },
        },
        TOKEN_METADATA_PROGRAM_ID
    );

    // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
        const tx = new Transaction().add(instruction);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            tx,
            [payer], // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
            { 
                commitment: "confirmed"
            }
        );

        console.log(`‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–¥–ø–∏—Å—å: ${signature}`);
        return signature;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (error.message && error.message.includes('already been executed')) {
             throw new Error("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.");
        }
        
        throw new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Metaplex: " + error.message);
    }
}
