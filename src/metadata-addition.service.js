// src/metadata-addition.service.js

import { 
    PublicKey, 
    Transaction, 
    sendAndConfirmTransaction,
    Keypair, 
    SystemProgram, 
    LAMPORTS_PER_SOL 
} from '@solana/web3.js'; 

// üõë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò ESM/CommonJS: 
import * as mplTokenMetadata from '@metaplex-foundation/mpl-token-metadata';

const createCreateMetadataAccountV3Instruction = mplTokenMetadata.createCreateMetadataAccountV3Instruction || (mplTokenMetadata.default && mplTokenMetadata.default.createCreateMetadataAccountV3Instruction);
const findMetadataPda = mplTokenMetadata.findMetadataPda || (mplTokenMetadata.default && mplTokenMetadata.default.findMetadataPda);

// üõë –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ SPL-TOKEN
import * as splToken from '@solana/spl-token';
const { 
    createMint, 
    createAssociatedTokenAccountInstruction, 
    createMintToInstruction,
    getAssociatedTokenAddressSync,
    TOKEN_PROGRAM_ID,
    MINT_SIZE
} = splToken;

// ‚úÖ –°–¢–†–û–ö–ê 31: –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ - –í–∫–ª—é—á–∞–µ–º METADATA_PROGRAM_ID –∏–∑ solana.service.js
import { getConnection, getServiceWallet, METADATA_PROGRAM_ID } from './solana.service.js';
import { Buffer } from 'buffer';

// ‚úÖ –°–¢–†–û–ö–ê 35: –ò–ú–ü–û–†–¢ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–´–• –í–´–ß–ò–°–õ–ï–ù–ò–ô
import { toBigInt } from './utils.js';

// --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–°–¢–ê–ù–¢ ---
// ‚ùå –°–¢–†–û–ö–ò 40-57 (–£–î–ê–õ–ï–ù–û): –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É METAPLEX_PROGRAM_ID_DEFAULT 
// –∏ –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é _getMetadataProgramId, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–ª–∞ –æ—à–∏–±–∫—É PublicKey.

/**
 * [–ü–†–ò–í–ê–¢–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø] –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex.
 * @param {PublicKey} mintPublicKey - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞.
 * @param {Keypair} payer - –ö–æ—à–µ–ª–µ–∫, –æ–ø–ª–∞—á–∏–≤–∞—é—â–∏–π –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—â–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
 * @param {Object} metadataDetails - –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (name, symbol, uri).
 * @returns {TransactionInstruction} –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
 */
function _createMetadataInstruction(mintPublicKey, payer, metadataDetails) {
    // ‚úÖ –°–¢–†–û–ö–ê 67: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –≥–æ—Ç–æ–≤—ã–π PublicKey
    const TOKEN_METADATA_PROGRAM_ID = METADATA_PROGRAM_ID; 
    
    // 1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const [metadataAddress] = PublicKey.findProgramAddressSync(
        [
            Buffer.from("metadata"),
            TOKEN_METADATA_PROGRAM_ID.toBuffer(), 
            mintPublicKey.toBuffer(),
        ],
        TOKEN_METADATA_PROGRAM_ID 
    );
    
    console.log(`–ê–¥—Ä–µ—Å PDA –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataAddress.toBase58()}`);
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const instruction = createCreateMetadataAccountV3Instruction(
        {
            metadata: metadataAddress,
            mint: mintPublicKey,
            mintAuthority: payer.publicKey,
            payer: payer.publicKey,
            updateAuthority: payer.publicKey,
        },
        {
            createMetadataAccountArgsV3: {
                data: {
                    name: metadataDetails.name,
                    symbol: metadataDetails.symbol,
                    uri: metadataDetails.uri,
                    sellerFeeBasisPoints: 0,
                    creators: null,
                    collection: null,
                    uses: null,
                },
                isMutable: true,
                collectionDetails: null,
            },
        },
        TOKEN_METADATA_PROGRAM_ID
    );
    
    return instruction;
}


/**
 * –°–û–ó–î–ê–ï–¢ –¢–û–ö–ï–ù MINT, –ß–ï–ö–ê–ù–ö–£–ï–¢ –ï–ì–û –ò –î–û–ë–ê–í–õ–Ø–ï–¢ –ú–ï–¢–ê–î–ê–ù–ù–´–ï METAPLEX.
 * @param {Object} tokenDetails - –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å name, symbol, uri, supply, decimals.
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∞–¥—Ä–µ—Å–æ–º –º–∏–Ω—Ç–∞.
 */
export async function createTokenAndMetadata(tokenDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    const mintKeypair = Keypair.generate(); 
    const mintPublicKey = mintKeypair.publicKey;
    
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–û–õ–ï–ï –°–¢–†–û–ì–ò–ô –ü–ê–†–°–ò–ù–ì –¶–ï–õ–´–• –ß–ò–°–ï–õ –ò –ó–ù–ê–ß–ï–ù–ò–Ø –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ---
    
    const decimalsString = tokenDetails.decimals || '9'; 
    const supplyString = tokenDetails.supply || '0';     

    const decimals = parseInt(decimalsString, 10);
    // –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–æ –¥–ª—è —á–µ–∫–∞–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É
    const supplyForValidation = parseInt(supplyString, 10);
    
    // –í–†–ï–ú–ï–ù–ù–û–ï –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –î–ï–ë–ê–ì–ê
    console.log(`[DEBUG] Input tokenDetails.supply: '${tokenDetails.supply}'`);
    console.log(`[DEBUG] Parsed supply value (parseInt): ${supplyForValidation}`);
    console.log(`[DEBUG] isNaN(supplyForValidation): false`);
    console.log(`[DEBUG] supplyForValidation <= 0: ${supplyForValidation <= 0}`);
    

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (isNaN(supplyForValidation) || supplyForValidation <= 0) {
        throw new Error("Supply (–æ–±—â–∏–π –∑–∞–ø–∞—Å) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.");
    }
    
    // –ï—Å–ª–∏ decimals –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 9.
    const finalDecimals = (isNaN(decimals) || decimals < 0 || decimals > 9) ? 9 : decimals;
    
    console.log(`\n--- –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê –ò –ú–ï–¢–ê–î–ê–ù–ù–´–• (D:${finalDecimals}, S:${supplyForValidation}) ---`);
    console.log(`–ù–æ–≤—ã–π Mint Address: ${mintPublicKey.toBase58()}`);
    
    // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ–Ω—Ç –∏ –∞–¥—Ä–µ—Å –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–æ–∫–µ–Ω –ê–∫–∫–∞—É–Ω—Ç–∞ (ATA)
    const requiredRent = await connection.getMinimumBalanceForRentExemption(MINT_SIZE);
    
    const tokenAccountAddress = getAssociatedTokenAddressSync(
        mintPublicKey,
        payer.publicKey,
        false, 
        TOKEN_PROGRAM_ID
    );
    
    console.log(`ATA Address (Payer): ${tokenAccountAddress.toBase58()}`);

    // --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ô ---
    let instructions = [];
    
    // 1. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ Mint Account
    instructions.push(
        SystemProgram.createAccount({
            fromPubkey: payer.publicKey,
            newAccountPubkey: mintPublicKey,
            space: MINT_SIZE,
            lamports: requiredRent,
            programId: TOKEN_PROGRAM_ID,
        })
    );
    
    // 2. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mint Account
    instructions.push(
        createMint(
            connection,
            payer,
            mintPublicKey,
            payer.publicKey, // Mint Authority
            finalDecimals, // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–û–í–ï–†–ï–ù–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
            mintKeypair,
            TOKEN_PROGRAM_ID,
        )
    );
    
    // 3. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ ATA
    instructions.push(
        createAssociatedTokenAccountInstruction(
            payer.publicKey,
            tokenAccountAddress,
            payer.publicKey,
            mintPublicKey,
            TOKEN_PROGRAM_ID
        )
    );
    
    // 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ß–µ–∫–∞–Ω–∫–∞ (Mint)
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ë–ï–ó–û–ü–ê–°–ù–£–Æ –§–£–ù–ö–¶–ò–Æ toBigInt –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏.
    const amountInSmallestUnit = toBigInt(supplyString, finalDecimals);

    instructions.push(
        createMintToInstruction(
            mintPublicKey,
            tokenAccountAddress,
            payer.publicKey, // Mint Authority
            amountInSmallestUnit, // Amount in smallest unit (–£–ñ–ï BigInt)
            [],
            TOKEN_PROGRAM_ID
        )
    );
    
    // 5. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex
    const metadataInstruction = _createMetadataInstruction(
        mintPublicKey, 
        payer, 
        tokenDetails
    );
    instructions.push(metadataInstruction);

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
        const tx = new Transaction().add(...instructions);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            tx,
            [payer, mintKeypair], 
            { 
                commitment: "confirmed",
                skipPreflight: false,
            }
        );

        console.log(`‚úÖ –¢–æ–∫–µ–Ω –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–¥–ø–∏—Å—å: ${signature}`);
        return { 
            mintAddress: mintPublicKey.toBase58(),
            signature: signature 
        };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error);
        throw new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞/–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: " + error.message);
    }
}


/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Metaplex –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞.
 * * @param {string} mintAddress - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞.
 * @param {Object} metadataDetails - –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (name, symbol, uri).
 * @returns {Promise<string>} –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 */
export async function addTokenMetadata(mintAddress, metadataDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    
    console.log(`\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${mintAddress} ---`);
    
    const mintPublicKey = new PublicKey(mintAddress);
    
    // 1. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    const instruction = _createMetadataInstruction(mintPublicKey, payer, metadataDetails);

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
        const tx = new Transaction().add(instruction);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            tx,
            [payer], // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
            { 
                commitment: "confirmed"
            }
        );

        console.log(`‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–¥–ø–∏—Å—å: ${signature}`);
        return signature;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error);
        
        if (error.message && error.message.includes('already been executed')) {
             throw new Error("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.");
        }
        
        throw new Error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Metaplex: " + error.message);
    }
}
