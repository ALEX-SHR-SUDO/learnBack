// src/metadata-addition.service.js

import { Buffer } from 'buffer';

import { 
    getServiceWallet, 
    getConnection, 
    getMetadataProgramId 
} from './solana.service.js';

import { 
    createAssociatedTokenAccountInstruction, 
    createInitializeMintInstruction, 
    getAssociatedTokenAddress, 
    MINT_SIZE,
    createMintToCheckedInstruction,
    createSetAuthorityInstruction,
    AuthorityType,
    TOKEN_PROGRAM_ID
} from '@solana/spl-token';

import { 
    Keypair, 
    SystemProgram, 
    Transaction, 
    sendAndConfirmTransaction,
    PublicKey
} from '@solana/web3.js';

// ‚ùå –£–î–ê–õ–ï–ù–û: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Metaplex. –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç.
// import * as mpl from '@metaplex-foundation/mpl-token-metadata';

// --- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–≠–® –î–õ–Ø METAPLEX ---
let mplCache = null;

/**
 * üí° –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç Metaplex, –∫—ç—à–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * @returns {object} - –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π DataV2, Creator –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
 */
async function getMetaplexExports() {
    if (mplCache) return mplCache;
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º CJS/ESM
    const mpl = await import('@metaplex-foundation/mpl-token-metadata');
    
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ Node.js –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CJS, —ç–∫—Å–ø–æ—Ä—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ .default
    const exports = mpl.default || mpl; 

    // –ö—ç—à–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    mplCache = {
        createCreateMetadataAccountV3Instruction: exports.createCreateMetadataAccountV3Instruction,
        DataV2: exports.DataV2,
        Creator: exports.Creator
    };
    
    return mplCache;
}


// --- –§–£–ù–ö–¶–ò–ò ---

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å Public Key –¥–ª—è –∞–¥—Ä–µ—Å–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (PDA).
 * ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
 */
function getMetadataAddress(mint) {
    let programId = getMetadataProgramId(); 
    
    if (!programId) {
         throw new Error("‚ùå Metaplex Program ID –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ solana.service.js");
    }

    if (!mint || !(mint instanceof PublicKey)) {
        throw new Error("Invalid or undefined Mint Public Key provided to getMetadataAddress.");
    }
    
    const [metadataAddress] = PublicKey.findProgramAddressSync(
        [
            Buffer.from("metadata"),
            programId.toBuffer(),
            mint.toBuffer(),
        ],
        programId
    );
    return metadataAddress;
}


/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex V3.
 * ‚ö†Ô∏è –°–¥–µ–ª–∞–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.
 * * @param {object} params - { mint, owner, name, symbol, uri }
 * @returns {Promise<object>} - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –∞–¥—Ä–µ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
 */
async function createMetaplexInstruction(params) {
    const { mint, owner, name, symbol, uri } = params;
    
    const { createCreateMetadataAccountV3Instruction, DataV2, Creator } = await getMetaplexExports();
    
    const metadataAddress = getMetadataAddress(mint);

    // --- 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (DataV2) ---
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
    const dataV2 = new DataV2({
        name: name,
        symbol: symbol,
        uri: uri,
        sellerFeeBasisPoints: 0,
        creators: [
            new Creator({
                address: owner,
                verified: true,
                share: 100
            })
        ],
        collection: null,
        uses: null
    });

    // --- 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
    let ix = createCreateMetadataAccountV3Instruction(
        {
            metadata: metadataAddress,
            mint: mint,
            mintAuthority: owner,
            payer: owner,
            updateAuthority: owner,
            systemProgram: SystemProgram.programId,
        },
        {
            createMetadataAccountArgsV3: {
                data: dataV2,
                isMutable: true, 
                collectionDetails: null 
            }
        }
    );

    return { 
        metadataAddress: metadataAddress,
        ix: ix
    };
}


/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω, —á–µ–∫–∞–Ω–∏—Ç –µ–≥–æ, –æ—Ç–∫–ª—é—á–∞–µ—Ç Authority –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ 
 * Metaplex –≤ –û–î–ù–û–ô –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 * * @param {object} tokenDetails - name, symbol, uri, supply, decimals.
 * @returns {object} - { mintAddress, ata, transactionSignature }
 */
export async function createTokenAndMetadata(tokenDetails) {
    const connection = getConnection();
    const payer = getServiceWallet();
    const { name, symbol, uri, supply, decimals } = tokenDetails;
    
    // --- –ü–û–î–ì–û–¢–û–í–ö–ê ---
    const mint = Keypair.generate();
    const owner = payer.publicKey;
    const decimalPlaces = parseInt(decimals, 10);
    
    const amount = BigInt(supply) * BigInt(10 ** decimalPlaces);
    
    const transaction = new Transaction();
    const signers = [payer, mint]; 

    // –ü–æ–ª—É—á–∞–µ–º Lamports –¥–ª—è –∞—Ä–µ–Ω–¥—ã Mint Account
    const lamports = await connection.getMinimumBalanceForRentExemption(MINT_SIZE);

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ Mint Account
    transaction.add(
        SystemProgram.createAccount({
            fromPubkey: owner,
            newAccountPubkey: mint.publicKey,
            space: MINT_SIZE,
            lamports,
            programId: TOKEN_PROGRAM_ID, 
        })
    );

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mint
    transaction.add(
        createInitializeMintInstruction(
            mint.publicKey,
            decimalPlaces,
            owner, // Mint Authority
            owner, // Freeze Authority
            TOKEN_PROGRAM_ID 
        )
    );
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ Associated Token Account (ATA) –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const associatedTokenAddress = await getAssociatedTokenAddress(
        mint.publicKey,
        owner,
        false, 
        TOKEN_PROGRAM_ID 
    );

    transaction.add(
        createAssociatedTokenAccountInstruction(
            owner, // payer
            associatedTokenAddress,
            owner, // owner
            mint.publicKey, // mint
            TOKEN_PROGRAM_ID 
        )
    );

    // 4. –ß–µ–∫–∞–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ ATA
    transaction.add(
        createMintToCheckedInstruction(
            mint.publicKey, 
            associatedTokenAddress,
            owner, // Mint Authority
            amount, 
            decimalPlaces,
            [], 
            TOKEN_PROGRAM_ID 
        )
    );
    
    // 5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Authority –¥–ª—è —á–µ–∫–∞–Ω–∫–∏
    transaction.add(
        createSetAuthorityInstruction(
            mint.publicKey,
            owner, // Current Authority
            AuthorityType.MintTokens,
            null, // New Authority (null = disable)
            [],
            TOKEN_PROGRAM_ID 
        )
    );

    // 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Metaplex Metadata (–í–°–ï –í –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò)
    // ‚ö†Ô∏è –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞
    const { ix: metadataIx } = await createMetaplexInstruction({
        mint: mint.publicKey,
        owner: payer.publicKey,
        ...tokenDetails
    });
    transaction.add(metadataIx);


    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
        const signature = await sendAndConfirmTransaction(
            connection,
            transaction,
            signers,
            { commitment: 'confirmed' }
        );
        
        const mintAddress = mint.publicKey.toBase58();

        return { 
            mintAddress: mintAddress, 
            ata: associatedTokenAddress.toBase58(),
            transactionSignature: signature
        };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error.message);
        throw error;
    }
}


/**
 * ‚ö†Ô∏è –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò.
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Metaplex –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É.
 * @param {string} mintAddress - Mint Public Key (Base58).
 * @param {object} metadata - name, symbol, uri.
 * @returns {string} - Transaction signature.
 */
export async function addTokenMetadata(mintAddress, metadata) {
    const connection = getConnection();
    const payer = getServiceWallet();
    const mint = new PublicKey(mintAddress);
    
    console.warn("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è addTokenMetadata. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å createTokenAndMetadata.");

    // ‚ö†Ô∏è –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞
    const { ix } = await createMetaplexInstruction({
        mint,
        owner: payer.publicKey,
        ...metadata
    });

    if (!ix) {
        console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: Metaplex Instruction –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.");
        return "Metadata_Application_Failed";
    }

    try {
        const transaction = new Transaction().add(ix);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            transaction,
            [payer],
            { commitment: 'confirmed' }
        );
        
        return signature;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error.message);
        throw error;
    }
}
