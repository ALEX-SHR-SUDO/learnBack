// src/token.routes.js

import express from "express";
const router = express.Router();

// ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PublicKey —Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ web3.js
import { PublicKey } from '@solana/web3.js'; 

import { createTokenAndMint } from "./token-creation.service.js"; 
import { addTokenMetadata } from "./metadata-addition.service.js"; 
import { getConnection, getServiceWalletBalance } from "./solana.service.js"; 

// ---------------------------------------------
// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ---
// ---------------------------------------------
router.get("/ping", async (req, res) => {
  try {
    const connection = getConnection();
    if (!connection) throw new Error("Solana connection failed.");
      
    const version = await connection.getVersion(); 
    res.json({ ok: true, solana: version });
  } catch (e) {
    res.status(500).json({ ok: false, error: e.toString() });
  }
});

// ---------------------------------------------
// --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (2 –®–ê–ì–ê) ---
// ---------------------------------------------
router.post("/create-token", async (req, res) => {
  const { name, symbol, uri, decimals, supply } = req.body; 

  console.log("Req Body Received:", req.body);
  console.log("Destructured values:", { name, symbol, uri, decimals, supply });
  
  if (!supply || !name || !symbol || !uri || !decimals) { 
    return res.status(400).json({ error: "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º—ã supply, name, symbol, uri –∏ decimals –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞" });
  }

  let mintAddress = null;

  try {
    // ==========================================================
    // –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –º–∏–Ω—Ç–∏–Ω–≥
    // ==========================================================
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –®–ê–ì 1: createTokenAndMint (—Å–æ–∑–¥–∞–Ω–∏–µ Mint-–∞–∫–∫–∞—É–Ω—Ç–∞)");
    
    const mintPublicKey = await createTokenAndMint({ 
        decimals: Number(decimals), 
        supply: Number(supply) 
    });
    mintAddress = mintPublicKey.toBase58();
    
    // ==========================================================
    // –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    // ==========================================================
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –®–ê–ì 2: addTokenMetadata (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)");
    
    // üõë –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –°–¢–†–û–ö–£, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç PublicKey.
    const metadataPublicKey = await addTokenMetadata(
        mintAddress, // <--- –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É Base58
        name, 
        symbol, 
        uri 
    );
    
    // ==========================================================
    // –£–°–ü–ï–•
    // ==========================================================
    console.log(`‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. Mint: ${mintAddress}`);
    res.json({
      mint: mintAddress,
      metadata: metadataPublicKey.toBase58(),
      solscan: `https://solscan.io/token/${mintAddress}?cluster=devnet`
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", err.toString());
    res.status(500).json({ 
        error: `–û—à–∏–±–∫–∞ –Ω–∞ Mint: ${mintAddress || 'N/A'}. –ü—Ä–∏—á–∏–Ω–∞: ${err.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}` 
    });
  }
});

// ---------------------------------------------
// --- –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ + —Ç–æ–∫–µ–Ω—ã ---
// ---------------------------------------------
router.get("/balance", async (req, res) => {
  try {
    const balanceData = await getServiceWalletBalance(); 
    res.json(balanceData);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err.toString());
    res.status(500).json({ error: err.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞" });
  }
});

export default router;
