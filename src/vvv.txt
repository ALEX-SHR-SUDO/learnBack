// ===== Загрузка метадаты JSON на Pinata =====
async function uploadMetadataToPinata(ipfsLogoUrl) {
  // Получаем значения из формы
  const name = tokenNameInput.value || "Token";
  const symbol = tokenSymbolInput.value || "TKN";
  // Если есть поле description - добавь его в форму, иначе будет пустая строка
  const descriptionInput = document.getElementById('token-description');
  const description = descriptionInput ? descriptionInput.value : "";

  // Формируем JSON метадаты
  const metadata = {
    name: name,
    symbol: symbol,
    image: ipfsLogoUrl,
    description: description,
    attributes: []
  };

  // Создаём blob из JSON
  const jsonBlob = new Blob([JSON.stringify(metadata)], { type: "application/json" });
  const formData = new FormData();
  formData.append('file', jsonBlob, 'metadata.json');

  // Загружаем JSON на backend -> Pinata
  try {
    const res = await fetch(`${BACKEND_URL}/api/upload-logo`, {
      method: 'POST',
      body: formData
    });
    const data = await res.json();
    if (res.ok && typeof data.ipfsUrl === "string") {
      // Автоматически вставляем URI метадаты в форму
      tokenUriInput.value = data.ipfsUrl;
      logoUploadStatus.textContent += '\n✅ Метадата загружена!';
      logoUploadStatus.className = 'status-message success';
    } else {
      logoUploadStatus.textContent = `❌ Ошибка загрузки метадаты: ${data.error || 'Нет ссылки'}`;
      logoUploadStatus.className = 'status-message error';
    }
  } catch (err) {
    logoUploadStatus.textContent = `❌ Ошибка загрузки метадаты: ${err.message}`;
    logoUploadStatus.className = 'status-message error';
  }
}

// ===== Загрузка метадаты JSON на Pinata =====
async function uploadMetadataToPinata(ipfsLogoUrl) {
  // Получаем значения из формы
  const name = tokenNameInput.value || "Token";
  const symbol = tokenSymbolInput.value || "TKN";
  // Если есть поле description - добавь его в форму, иначе будет пустая строка
  const descriptionInput = document.getElementById('token-description');
  const description = descriptionInput ? descriptionInput.value : "";

  // --- Всегда используем публичный gateway ---
  // ipfsLogoUrl обычно уже публичный, но если нет, заменим домен:
  const safeIpfsLogoUrl = ipfsLogoUrl.replace(
    /https:\/\/[^\/]+\/ipfs\//,
    "https://gateway.pinata.cloud/ipfs/"
  );

  // Формируем JSON метадаты
  const metadata = {
    name: name,
    symbol: symbol,
    image: safeIpfsLogoUrl,
    description: description,
    attributes: []
  };

  // Создаём blob из JSON
  const jsonBlob = new Blob([JSON.stringify(metadata)], { type: "application/json" });
  const formData = new FormData();
  formData.append('file', jsonBlob, 'metadata.json');

  // Загружаем JSON на backend -> Pinata
  try {
    const res = await fetch(`${BACKEND_URL}/api/upload-logo`, {
      method: 'POST',
      body: formData
    });
    const data = await res.json();
    if (res.ok && typeof data.ipfsUrl === "string") {
      // Автоматически вставляем URI метадаты в форму (заменяем gateway для надёжности)
      tokenUriInput.value = data.ipfsUrl.replace(
        /https:\/\/[^\/]+\/ipfs\//,
        "https://gateway.pinata.cloud/ipfs/"
      );
      logoUploadStatus.textContent += '\n✅ Метадата загружена!';
      logoUploadStatus.className = 'status-message success';
    } else {
      logoUploadStatus.textContent = `❌ Ошибка загрузки метадаты: ${data.error || 'Нет ссылки'}`;
      logoUploadStatus.className = 'status-message error';
    }
  } catch (err) {
    logoUploadStatus.textContent = `❌ Ошибка загрузки метадаты: ${err.message}`;
    logoUploadStatus.className = 'status-message error';
  }
}