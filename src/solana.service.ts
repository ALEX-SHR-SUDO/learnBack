// src/solana.service.ts

import { 
    Connection, 
    Keypair, 
    LAMPORTS_PER_SOL,
    PublicKey 
} from '@solana/web3.js'; 
import bs58 from "bs58";
import * as splToken from '@solana/spl-token'; 
import dotenv from 'dotenv';

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ dotenv.config(), —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ 
// (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏) –∏ –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç server.ts.
dotenv.config();

// --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –õ–ï–ù–ò–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
// –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ .env, —á—Ç–æ–±—ã –∫–ª–∞—Å—Ç–µ—Ä –º–æ–∂–Ω–æ –±—ã–ª–æ –º–µ–Ω—è—Ç—å
const CLUSTER_URL = process.env.SOLANA_CLUSTER_URL || 'https://api.devnet.solana.com';
const WALLET_SECRET_KEY = process.env.SERVICE_SECRET_KEY_BASE58; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ .env
let connectionInstance: Connection | null = null;
let serviceWalletInstance: Keypair | null = null;

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Connection.
 * @returns {Connection}
 */
export function getConnection(): Connection {
    if (!connectionInstance) {
        connectionInstance = new Connection(CLUSTER_URL, 'confirmed');
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É: ${CLUSTER_URL}`);
    }
    return connectionInstance;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç Keypair –∏–∑ SERVICE_SECRET_KEY_BASE58.
 * @returns {Keypair} Keypair of the service wallet
 */
export function getServiceWallet(): Keypair {
    if (serviceWalletInstance) return serviceWalletInstance;

    if (!WALLET_SECRET_KEY) {
        throw new Error("SERVICE_SECRET_KEY_BASE58 is not defined in environment. Check your .env file.");
    }
    try {
        // –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–ª—é—á Base58 –±—É–¥–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫, 
        // –∏–Ω–∞—á–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–±–æ–π, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∂–µ.
        const secretKeyUint8 = bs58.decode(WALLET_SECRET_KEY);
        // Keypair.fromSecretKey –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Uint8Array (64 –±–∞–π—Ç–∞)
        serviceWalletInstance = Keypair.fromSecretKey(secretKeyUint8);
        console.log(`‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: ${serviceWalletInstance.publicKey.toBase58()}`);
        return serviceWalletInstance;
    } catch (e) {
        throw new Error(`Failed to load Keypair from SERVICE_SECRET_KEY_BASE58: ${e instanceof Error ? e.message : 'Unknown error'}`);
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–≤ SOL) –∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤.
 * @returns {Promise<object>} –û–±—ä–µ–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º, –±–∞–ª–∞–Ω—Å–æ–º SOL –∏ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤.
 */
export async function getServiceWalletBalance(): Promise<{ serviceAddress: string, sol: number, tokens: { mint: string, amount: number }[] }> {
    try {
        const keypair = getServiceWallet();
        const connection = getConnection();
        const serviceAddress = keypair.publicKey.toBase58();
        
        let tokenList: { mint: string, amount: number }[] = [];
        
        // Fetch SOL balance
        const balanceLamports = await connection.getBalance(keypair.publicKey);
        const balanceSOL = balanceLamports / LAMPORTS_PER_SOL;
        
        // Fetch SPL token list
        const tokenAccounts = await connection.getTokenAccountsByOwner(
            keypair.publicKey,
            { programId: splToken.TOKEN_PROGRAM_ID } 
        );

        tokenList = tokenAccounts.value
            .map(accountInfo => {
                const data = splToken.AccountLayout.decode(accountInfo.account.data);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å
                if (data.state === splToken.AccountState.Initialized && data.amount > 0) {
                     return {
                        mint: data.mint.toBase58(),
                        amount: Number(data.amount) / Math.pow(10, 9), // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 9 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                    };
                }
                return null;
            })
            .filter((token): token is { mint: string, amount: number } => token !== null);

        return { 
            serviceAddress: serviceAddress,
            sol: balanceSOL,
            tokens: tokenList
        };
        
    } catch (error) {
        // –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å "–Ω–µ –Ω–∞–π–¥–µ–Ω". 
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        if (error instanceof Error && error.message.includes('Account not found')) {
             const address = getServiceWallet().publicKey.toBase58();
             return { 
                serviceAddress: address,
                sol: 0,
                tokens: []
            };
        }
        
        throw new Error(`Failed to fetch service wallet balance: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
}

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï ---
// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å .env –∏ –≤—ã–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
try {
    getServiceWallet();
} catch (e) {
    console.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ö–û–®–ï–õ–¨–ö–ê:", e instanceof Error ? e.message : 'Unknown error');
    console.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SERVICE_SECRET_KEY_BASE58 —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env.");
    // –ú—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã Express –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –Ω–æ –ª–æ–≥–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É.
}
