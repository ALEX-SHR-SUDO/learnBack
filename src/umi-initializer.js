// src/umi-initializer.js

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
// ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢
import * as web3jsAdapters from '@metaplex-foundation/umi-web3js-adapters';

import { loadServiceWallet } from "./service-wallet.js"; 

let umiInstance;

export async function initializeUmi() {
    if (umiInstance) return umiInstance;
    
    try {
        const serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVICE_SECRET_KEY.");
        }
        
        // üí• –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö –ê–î–ê–ü–¢–ï–†–ê (–±–µ–∑ await)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
        let adapterPlugin = web3jsAdapters.web3Js || web3jsAdapters.default; 
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ–µ
        if (typeof adapterPlugin === 'function') {
             adapterPlugin = adapterPlugin();
        }

        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ undefined, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .default.web3Js)
        if (!adapterPlugin) {
             adapterPlugin = web3jsAdapters.default?.web3Js;
        }

        // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:
        if (!adapterPlugin || typeof adapterPlugin.install !== 'function') {
             throw new Error(`Web3Js adapter not resolved after all attempts.`);
        }

        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi ---
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω
        umiInstance.use(adapterPlugin);
        
        // 2. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        // 3. –ü–ª–∞–≥–∏–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        umiInstance.use(mplTokenMetadata());
        
        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Umi Initializer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}