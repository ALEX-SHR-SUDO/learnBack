// src/umi-initializer.js

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
// ‚ùå –£–î–ê–õ–Ø–ï–ú: import * as web3jsAdapters from '@metaplex-foundation/umi-web3js-adapters';

import { loadServiceWallet } from "./service-wallet.js"; 

let umiInstance;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Umi (–°–Ω–æ–≤–∞ ASYNC).
 * @returns {Promise<Umi.Umi | undefined>} –ò–Ω—Å—Ç–∞–Ω—Ü–∏—è Umi
 */
export async function initializeUmi() { // ‚úÖ –°–î–ï–õ–ê–ù–û ASYNC
    if (umiInstance) return umiInstance;
    
    try {
        const serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVICE_SECRET_KEY.");
        }
        
        // --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ê–¥–∞–ø—Ç–µ—Ä–∞ ---
        const web3jsAdapters = await import('@metaplex-foundation/umi-web3js-adapters');
        
        // üí• –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ê–î–ê–ü–¢–ï–†–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
        // 1. web3Js() (–µ—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è) 2. web3Js (–µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç) 3. .default 4. .default.web3Js
        let adapterPlugin = web3jsAdapters.web3Js;
        
        if (!adapterPlugin) {
            adapterPlugin = web3jsAdapters.default?.web3Js || web3jsAdapters.default;
        }

        if (typeof adapterPlugin === 'function') {
            adapterPlugin = adapterPlugin(); // –í—ã–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
        }
        
        if (!adapterPlugin || typeof adapterPlugin.install !== 'function') {
            throw new Error(`Web3Js adapter not correctly resolved. Resolved type: ${typeof adapterPlugin}`);
        }

        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi ---
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω
        umiInstance.use(adapterPlugin);
        
        // ‚úÖ –§–ò–ö–° SIGNER IDENTITY (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã eddsa)
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        umiInstance.use(mplTokenMetadata());
        // -------------------------

        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Umi Initializer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}