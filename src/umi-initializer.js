// src/umi-initializer.js

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
import { loadServiceWallet } from "./service-wallet.js"; 

let umiInstance;

export async function initializeUmi() {
    if (umiInstance) return umiInstance;
    
    try {
        const serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.");
        }
        
         // --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ê–¥–∞–ø—Ç–µ—Ä–∞ (–Ω–æ–≤—ã–π, —á–∏—Å—Ç—ã–π –æ–±—Ö–æ–¥) ---
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º –ø–ª–∞–≥–∏–Ω, –±–µ–∑ *, –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º .default
        const web3JsAdapter = (await import('@metaplex-foundation/umi-web3js-adapters')).default; 
        
        let adapterPlugin = web3JsAdapter;

        // –í–ê–ñ–ù–û: –ê–¥–∞–ø—Ç–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å, 
        // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç-–ø–ª–∞–≥–∏–Ω (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤).
        if (typeof adapterPlugin === 'function') {
             adapterPlugin = adapterPlugin();
        }
        
        // üí• –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:
        if (!adapterPlugin || typeof adapterPlugin.install !== 'function') {
             throw new Error(`Web3Js adapter not resolved after all attempts. (Type: ${typeof adapterPlugin})`);
        }

        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi —Å —á–∏—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π ---
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // 1. –ê–¥–∞–ø—Ç–µ—Ä
        umiInstance.use(adapterPlugin); 

        // 2. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (Signer Identity)
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        // 3. –ü–ª–∞–≥–∏–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        umiInstance.use(mplTokenMetadata());
        
        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Umi Initializer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}