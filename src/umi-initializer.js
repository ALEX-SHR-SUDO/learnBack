// src/umi-initializer.js

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
import { loadServiceWallet } from "./service-wallet.js"; 

let umiInstance;

export async function initializeUmi() {
    if (umiInstance) return umiInstance;
    
    try {
        const serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.");
        }
        
        // --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ê–¥–∞–ø—Ç–µ—Ä–∞ (—á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã) ---
        const web3jsAdapters = await import('@metaplex-foundation/umi-web3js-adapters');
        
        // üí• –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö –ê–î–ê–ü–¢–ï–†–ê (–ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ)
        let adapterPlugin = web3jsAdapters.web3Js || web3jsAdapters.default;

        if (typeof adapterPlugin === 'function') {
            adapterPlugin = adapterPlugin(); 
        }

        if (adapterPlugin && adapterPlugin.default) {
            adapterPlugin = adapterPlugin.default;
        }

        if (!adapterPlugin || typeof adapterPlugin.install !== 'function') {
             throw new Error(`Web3Js adapter not resolved after all attempts.`);
        }

        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi —Å —á–∏—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π ---
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // 1. –ê–¥–∞–ø—Ç–µ—Ä
        umiInstance.use(adapterPlugin); 

        // 2. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (Signer Identity)
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        // 3. –ü–ª–∞–≥–∏–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        umiInstance.use(mplTokenMetadata());
        
        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Umi Initializer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}