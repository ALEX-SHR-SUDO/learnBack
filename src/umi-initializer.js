// src/umi-initializer.js

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
import { Connection } from '@solana/web3.js'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π Connection
import { loadServiceWallet } from "./service-wallet.js"; 

let umiInstance;

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∞–¥–∞–ø—Ç–µ—Ä–∞ Web3Js –≤—Ä—É—á–Ω—É—é (–û–ë–•–û–î–ù–û–ô –ü–£–¢–¨).
 * @param {Connection} connection 
 */
function web3JsUmiAdapter(connection) {
    return {
        install(umi) {
            // –≠—Ç—É –ª–æ–≥–∏–∫—É –º—ã –±–µ—Ä–µ–º –∏–∑ umi-web3js-adapters, –Ω–æ —Å–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é
            umi.use({ 
                getRpc() {
                    return {
                        send(rpcInput) {
                            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            throw new Error("RPC send not fully implemented in manual adapter.");
                        },
                        sendTransaction(transaction) {
                            return connection.sendRawTransaction(transaction.serialize());
                        }
                    };
                },
                getConnection() {
                    return connection;
                }
            });
        }
    };
}


export async function initializeUmi() {
    if (umiInstance) return umiInstance;
    
    try {
        const serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVICE_SECRET_KEY.");
        }

        // 1. –°–æ–∑–¥–∞–µ–º Connection
        const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi —Å —á–∏—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // üí• –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–¥–µ–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
        umiInstance.use(web3JsUmiAdapter(connection)); 

        // 3. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        // 4. –ü–ª–∞–≥–∏–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        umiInstance.use(mplTokenMetadata());
        
        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Umi Initializer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}