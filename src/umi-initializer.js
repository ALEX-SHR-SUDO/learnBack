// src/umi-initializer.js

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
import { Connection } from '@solana/web3.js'; 
import { loadServiceWallet } from "./service-wallet.js"; 

let umiInstance;

// 1. –ü–õ–ê–ì–ò–ù –ê–î–ê–ü–¢–ï–†–ê WEB3JS (–û–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏)
function web3JsUmiAdapter(connection) {
    return {
        install(umi) {
            umi.use({ 
                getRpc: () => ({
                    send: (rpcInput) => { throw new Error("RPC send not fully implemented in manual adapter."); },
                    sendTransaction: (transaction) => connection.sendRawTransaction(transaction.serialize()),
                }),
                getConnection: () => connection,
            });
        }
    };
}

// üí• 2. –ü–õ–ê–ì–ò–ù EDDSA (–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –¥–ª—è 'generateKeypair')
function eddsaAdapter() {
    return {
        install(umi) {
            // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ EDDSA –∫ Umi
            umi.use({
                eddsa: {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Umi –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π,
                    // –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ Umi –∑–∞–≥—Ä—É–∂–µ–Ω
                    generateKeypair: Umi.generateSigner,
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
                    verify: Umi.verifySignature,
                    sign: Umi.signTransaction,
                    // –ú—ã –Ω–µ –º–æ–∂–µ–º –ª–µ–≥–∫–æ —Å–æ–∑–¥–∞—Ç—å generateSigner, –Ω–æ generateKeypair –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–∑ generateSigner
                }
            });
        }
    };
}


export async function initializeUmi() {
    if (umiInstance) return umiInstance;
    
    try {
        const serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVICE_SECRET_KEY.");
        }

        const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
        
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // 1. –ê–¥–∞–ø—Ç–µ—Ä Web3JS (–û–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å)
        umiInstance.use(web3JsUmiAdapter(connection)); 

        // üí• 2. –ü–õ–ê–ì–ò–ù EDDSA (–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!)
        umiInstance.use(eddsaAdapter()); 

        // 3. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (Signer Identity)
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        // 4. –ü–ª–∞–≥–∏–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        umiInstance.use(mplTokenMetadata());
        
        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Umi Initializer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}