// src/solana.service.js

import {
  Connection,
  clusterApiUrl,
  LAMPORTS_PER_SOL
} from "@solana/web3.js";

import {
  TOKEN_PROGRAM_ID
} from "@solana/spl-token"; 

// ‚úÖ –ò–ú–ü–û–†–¢: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
import { loadServiceWallet } from "./service-wallet.js"; 

import { createUmi, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 
import * as web3jsAdapters from '@metaplex-foundation/umi-web3js-adapters';


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∏ Umi ---

const connection = new Connection(clusterApiUrl("devnet"), "confirmed");

let serviceWallet;
let umiInstance; // Umi –ò–ù–°–¢–ê–ù–¶–ò–Ø

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Umi.
 * @returns {Umi.Umi | undefined} –ò–Ω—Å—Ç–∞–Ω—Ü–∏—è Umi
 */
function initializeUmi() {
    if (umiInstance) return umiInstance;
    
    try {
        serviceWallet = loadServiceWallet();
        if (!serviceWallet) {
            throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVICE_SECRET_KEY.");
        }
        
        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi ---
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // üí• –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–° –ê–î–ê–ü–¢–ï–†–ê:
        const web3JsPlugin = web3jsAdapters.web3Js || web3jsAdapters.default?.web3Js;

        if (typeof web3JsPlugin === 'function') {
            umiInstance.use(web3JsPlugin()); 
        } else {
            umiInstance.use(web3jsAdapters.web3Js);
        }
        
        // ‚úÖ –§–ò–ö–° SIGNER IDENTITY (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã eddsa)
        const serviceSigner = createSignerFromKeypair(umiInstance, serviceWallet);
        umiInstance.use(Umi.signerIdentity(serviceSigner)); 

        umiInstance.use(mplTokenMetadata());
        // -------------------------

        return umiInstance;
    } catch (err) {
        console.error(`‚ùå Solana Service: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
initializeUmi();


// --- –§—É–Ω–∫—Ü–∏–∏ –ë–ª–æ–∫—á–µ–π–Ω–∞ ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å SOL –∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
 * (–û—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
 */
async function getServiceWalletBalance() {
  const umi = initializeUmi(); 
  if (!umi || !serviceWallet) {
    throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.");
  }
  
  const pubKey = serviceWallet.publicKey;
  const solBalanceLamports = await connection.getBalance(pubKey);
  const solBalance = solBalanceLamports / LAMPORTS_PER_SOL;

  const tokenAccounts = await connection.getParsedTokenAccountsByOwner(pubKey, {
    programId: TOKEN_PROGRAM_ID
  });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å UI amount > 0
  const tokens = tokenAccounts.value
    .map(acc => ({
      mint: acc.account.data.parsed.info.mint,
      amount: acc.account.data.parsed.info.tokenAmount.uiAmount
    }))
    .filter(token => token.amount > 0);

  return {
    serviceAddress: pubKey.toBase58(),
    sol: solBalance,
    tokens
  };
}


// --- –≠–∫—Å–ø–æ—Ä—Ç ---
export {
  connection,
  // ‚ùå –£–î–ê–õ–ï–ù–ê createNewToken
  getServiceWalletBalance,
  initializeUmi 
};