// src/solana.service.js

import {
  Connection,
  Keypair,
  clusterApiUrl,
  LAMPORTS_PER_SOL
} from "@solana/web3.js";

import {
  TOKEN_PROGRAM_ID
} from "@solana/spl-token"; 


import { createToken as createTokenStep } from "./token-creation.service.js";
import { addMetadataToToken as addMetadataStep } from "./metadata-addition.service.js"; 
import { createUmi } from '@metaplex-foundation/umi'; // –ë–∞–∑–æ–≤—ã–π Umi
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; 

// ‚ùå –£–î–ê–õ–ï–ù —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç web3jsAdapters:
// import * as web3jsAdapters from '@metaplex-foundation/umi-web3js-adapters';


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∏ Umi ---

const connection = new Connection(clusterApiUrl("devnet"), "confirmed");

let serviceWallet;
let umiInstance; // Umi –ò–ù–°–¢–ê–ù–¶–ò–Ø

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Umi (—á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å –∫–ª—é—á 3 —Ä–∞–∑–∞).
 * @returns {Promise<Umi.Umi | undefined>} –ò–Ω—Å—Ç–∞–Ω—Ü–∏—è Umi
 */
async function initializeUmi() { // ‚úÖ –°–î–ï–õ–ê–ù–û ASYNC
    if (umiInstance) return umiInstance;
    
    try {
        const secretKeyString = process.env.SERVICE_SECRET_KEY;
        if (!secretKeyString) {
            throw new Error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SERVICE_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }

        const secretKey = JSON.parse(secretKeyString);
        serviceWallet = Keypair.fromSecretKey(Uint8Array.from(secretKey));
        
        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi ---
        umiInstance = createUmi('https://api.devnet.solana.com');  
        
        // üí• –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π import() –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const web3jsAdapters = await import('@metaplex-foundation/umi-web3js-adapters');
        
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞: web3Js –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ –∏–ª–∏ –≤ .default
        const web3JsPlugin = web3jsAdapters.web3Js || web3jsAdapters.default?.web3Js || web3jsAdapters.default;
        
        if (!web3JsPlugin) {
             throw new Error("web3Js plugin not found in adapter object.");
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω: –≤—ã–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        umiInstance.use(typeof web3JsPlugin === 'function' ? web3JsPlugin() : web3JsPlugin);
        
        umiInstance.use(mplTokenMetadata()); // <-- –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ–µ
        umiInstance.use(Umi.keypairIdentity(serviceWallet)); 
        // -------------------------

        console.log("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ (Solana Service) –∑–∞–≥—Ä—É–∂–µ–Ω:", serviceWallet.publicKey.toBase58());
        return umiInstance;
    } catch (err) {
        // –£–±—Ä–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ReferenceError
        console.error(`‚ùå Solana Service: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫/Umi. –ü—Ä–∏—á–∏–Ω–∞: ${err.message}`);
        return undefined;
    }
}

// ‚ùå –£–î–ê–õ–ï–ù –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ initializeUmi(), —Ç.–∫. –æ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–µ–Ω

// --- –§—É–Ω–∫—Ü–∏–∏ –ë–ª–æ–∫—á–µ–π–Ω–∞ ---

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –º–∏–Ω—Ç–∏—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≤ 2 —ç—Ç–∞–ø–∞.
 */
async function createNewToken({ name, symbol, uri, decimals, supply }) {
  // ‚úÖ initializeUmi —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º await
  const umi = await initializeUmi(); 
  if (!umi) {
    throw new Error("Umi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVICE_SECRET_KEY.");
  }
  if (!name || !symbol || !uri) {
    throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å name, symbol –∏ uri –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.");
  }
  
  let mintAddress = null;

  try {
      // ------------------------------------------------------------------
      // –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –º–∏–Ω—Ç–∏–Ω–≥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
      // ------------------------------------------------------------------
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
      // üí• –§–ò–ö–°–ò–ú –í–´–ó–û–í: –ü–µ—Ä–µ–¥–∞–µ–º { umi, decimals, supply }
      const tokenResult = await createTokenStep({ 
          umi, // <--- –≠–¢–û –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï: –ü–ï–†–ï–î–ê–ï–ú –ò–ù–°–¢–ê–ù–° UMI!
          decimals, 
          supply 
      }); 
      mintAddress = tokenResult.mint;
      console.log(`‚úÖ –®–ê–ì 1 —É—Å–ø–µ—à–µ–Ω. –ê–¥—Ä–µ—Å Mint: ${mintAddress}`);
      
      // ------------------------------------------------------------------
      // –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      // ------------------------------------------------------------------
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...");
      await addMetadataStep({ umi, mintAddress, name, symbol, uri });
      console.log("‚úÖ –®–ê–ì 2 —É—Å–ø–µ—à–µ–Ω. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.");

      return { mint: mintAddress }; 

  } catch (err) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (Mint: ${mintAddress || 'N/A'}):`, err.message);
      // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–æ—É—Ç–µ
      throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. ${err.message}`); 
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å SOL –∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
 */
async function getServiceWalletBalance() {
  // ‚úÖ initializeUmi —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º await
  const umi = await initializeUmi(); 
  if (!umi || !serviceWallet) {
    throw new Error("–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.");
  }
  
  const pubKey = serviceWallet.publicKey;
  const solBalanceLamports = await connection.getBalance(pubKey);
  const solBalance = solBalanceLamports / LAMPORTS_PER_SOL;

  const tokenAccounts = await connection.getParsedTokenAccountsByOwner(pubKey, {
    programId: TOKEN_PROGRAM_ID
  });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å UI amount > 0
  const tokens = tokenAccounts.value
    .map(acc => ({
      mint: acc.account.data.parsed.info.mint,
      amount: acc.account.data.parsed.info.tokenAmount.uiAmount
    }))
    .filter(token => token.amount > 0);

  return {
    serviceAddress: pubKey.toBase58(),
    sol: solBalance,
    tokens
  };
}


// --- –≠–∫—Å–ø–æ—Ä—Ç ---
export {
  connection,
  createNewToken,
  getServiceWalletBalance,
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  initializeUmi 
};