// src/metadata.service.js

// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º createUmi –∏–∑ –±–∞–Ω–¥–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∏ –∞–¥—Ä–µ—Å–∞
import { createUmi } from '@metaplex-foundation/umi-bundle-defaults'; 
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è keypairIdentity
import * as web3 from '@solana/web3.js'; 
import { createAndMint } from '@metaplex-foundation/mpl-token-metadata';


let umi;

// ‚úÖ –§–£–ù–ö–¶–ò–Ø registerDevnetPrograms –£–î–ê–õ–ï–ù–ê

function initializeUmi(walletKeypair) {
    if (!walletKeypair) {
        throw new Error("Wallet Keypair required for Umi initialization.");
    }
    
    // 1. –°–æ–∑–¥–∞–µ–º Umi —Å –ø–æ–º–æ—â—å—é Umi-Bundle. –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç ProgramRepository.
    umi = createUmi('https://api.devnet.solana.com'); 
        
    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø–ª–∞–≥–∏–Ω
    umi.use(mplTokenMetadata()); 
    umi.use(Umi.keypairIdentity(walletKeypair)); 
    
    console.log(`Umi initialized. Payer: ${umi.identity.publicKey.toString()}`);
    
    return umi.identity; 
}


async function createTokenWithMetadata({ name, symbol, uri, decimals, supply }) {
    if (!umi) {
        throw new Error("Umi not initialized. Call initializeUmi first.");
    }
    
    // –ó–∞—â–∏—Ç–∞ —Å—Ç—Ä–æ–∫ (–∫–∞–∫ –º—ã —É–∂–µ –¥–µ–ª–∞–ª–∏)
    const tokenName = String(name || ''); 
    const tokenSymbol = String(symbol || '');
    const tokenUri = String(uri || '');
    
    // ‚úÖ –£–°–ò–õ–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –ß–ò–°–ï–õ
    const parsedDecimals = parseInt(decimals) || 9; // parseInt('9') -> 9
    // –ï—Å–ª–∏ supply null, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0. –ó–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º.
    const safeSupply = supply ? parseFloat(supply) : 0; 
    
    // üí• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BigInt: –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º BigInt –¥–ª—è —Å—Ç–µ–ø–µ–Ω–∏ –∏ —É–º–Ω–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.
    const multiplier = BigInt(10) ** BigInt(parsedDecimals);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ BigInt, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ Math.round()
    // NOTE: –ü–æ—Å–∫–æ–ª—å–∫—É JS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å BigInt –∏ float –Ω–∞–ø—Ä—è–º—É—é, –º—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    // —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –Ω–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NaN.
    const amountFloat = safeSupply * Math.pow(10, parsedDecimals); 
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ NaN, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0L (BigInt –Ω–æ–ª—å)
    const totalAmount = isNaN(amountFloat) 
        ? BigInt(0) 
        : BigInt(Math.round(amountFloat)); // –¢–µ–ø–µ—Ä—å Math.round –∑–∞—â–∏—â–µ–Ω
    
    if (totalAmount === BigInt(0) && safeSupply > 0) {
        console.error("Total amount calculation resulted in zero despite non-zero supply.");
        // –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å throw Error, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –Ω—É–ª–µ–≤—ã–º –∑–∞–ø–∞—Å–æ–º
    }
    
    const mintKeypair = umi.eddsa.generateKeypair(); 
    
    await createAndMint(umi, {
        mint: mintKeypair,
        authority: umi.identity.publicKey.toString(),
        name: tokenName,
        symbol: tokenSymbol,
        uri: tokenUri,
        sellerFeeBasisPoints: Number(0), 
        decimals: parsedDecimals,
        amount: totalAmount, // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π totalAmount
        tokenOwner: umi.identity.publicKey.toString(), 
        
    }).sendAndConfirm(umi);
    
    return { mint: mintKeypair.publicKey.toString() };
}


// --- –≠–∫—Å–ø–æ—Ä—Ç ---
export {
    initializeUmi,
    createTokenWithMetadata
};