// src/metadata.service.js

// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º createUmi –∏–∑ –±–∞–Ω–¥–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∏ –∞–¥—Ä–µ—Å–∞
import { createUmi } from '@metaplex-foundation/umi-bundle-defaults'; 
import { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import * as Umi from '@metaplex-foundation/umi'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è keypairIdentity
import * as web3 from '@solana/web3.js'; 
import { createAndMint } from '@metaplex-foundation/mpl-token-metadata';


let umi;

// ‚úÖ –§–£–ù–ö–¶–ò–Ø registerDevnetPrograms –£–î–ê–õ–ï–ù–ê

function initializeUmi(walletKeypair) {
    if (!walletKeypair) {
        throw new Error("Wallet Keypair required for Umi initialization.");
    }
    
    // 1. –°–æ–∑–¥–∞–µ–º Umi —Å –ø–æ–º–æ—â—å—é Umi-Bundle. –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç ProgramRepository.
    umi = createUmi('https://api.devnet.solana.com'); 
        
    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø–ª–∞–≥–∏–Ω
    umi.use(mplTokenMetadata()); 
    umi.use(Umi.keypairIdentity(walletKeypair)); 
    
    console.log(`Umi initialized. Payer: ${umi.identity.publicKey.toString()}`);
    
    return umi.identity; 
}


async function createTokenWithMetadata({ name, symbol, uri, decimals, supply }) {
    if (!umi) {
        throw new Error("Umi not initialized. Call initializeUmi first.");
    }
    
    // --- –ó–∞—â–∏—Ç–∞ –í—Ö–æ–¥–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö ---
    const tokenName = String(name || ''); 
    const tokenSymbol = String(symbol || '');
    const tokenUri = String(uri || '');
    
    const parsedDecimals = parseInt(decimals) || 9;
    const parsedSupply = parseFloat(supply || 0);
    
    const amountFloat = parsedSupply * Math.pow(10, parsedDecimals);
    const totalAmount = isNaN(amountFloat) 
        ? BigInt(0) 
        : BigInt(Math.round(amountFloat));
    
    const mintKeypair = umi.eddsa.generateKeypair(); 
    
    // --- –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –í–°–ï–• –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π Umi ---
    await createAndMint(umi, {
        mint: mintKeypair,
        
        // –í–ª–∞—Å—Ç—å –Ω–∞–¥ —Ç–æ–∫–µ–Ω–æ–º (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        authority: umi.identity.publicKey.toString(), 
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        name: tokenName,
        symbol: tokenSymbol,
        uri: tokenUri,
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        sellerFeeBasisPoints: Number(0), // –†–æ—è–ª—Ç–∏: 0%
        decimals: parsedDecimals,
        amount: totalAmount, 
        
        // üí• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Owner –∏ TokenOwner
        // Owner ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–∫–µ–Ω-—Å—á—ë—Ç–∞ (–¥–ª—è Umi —ç—Ç–æ –≤–∞–∂–Ω–æ)
        owner: umi.identity.publicKey.toString(), 
        
        // TokenOwner ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è SPL)
        tokenOwner: umi.identity.publicKey.toString(), 
        
        // üí• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π (creators) –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        creators: [{
            address: umi.identity.publicKey.toString(),
            share: 100, // 100% –¥–æ–ª—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–º—É –∫–æ—à–µ–ª—å–∫—É
            verified: true,
        }],
        
        // –Ø–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection: null, 
        
    }).sendAndConfirm(umi);
    
    return { mint: mintKeypair.publicKey.toString() };
}


// --- –≠–∫—Å–ø–æ—Ä—Ç ---
export {
    initializeUmi,
    createTokenWithMetadata
};