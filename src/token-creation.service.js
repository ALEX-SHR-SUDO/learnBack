// src/token-creation.service.js

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π generateSigner
import { generateSigner } from '@metaplex-foundation/umi';
import { createAndMint } from '@metaplex-foundation/mpl-token-metadata';


/**
 * –°–æ–∑–¥–∞–µ—Ç Mint-–∞–∫–∫–∞—É–Ω—Ç –∏ –º–∏–Ω—Ç–∏—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
 * @param {object} params
 * @param {Umi} params.umi –ò–Ω—Å—Ç–∞–Ω—Ü–∏—è Umi (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê)
 * // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
 */
export async function createToken({ umi, decimals, supply }) { 
    if (!umi) {
        // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π...
        throw new Error("UMI instance is required.");
    }
    
    // --- –†–∞—Å—á–µ—Ç Supply –∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mint ---
    const parsedDecimals = Number(decimals);
    const parsedSupply = Number(supply);

    if (isNaN(parsedDecimals) || isNaN(parsedSupply) || parsedSupply <= 0) {
        throw new Error("Invalid decimals or supply provided.");
    }
    
    // üí• –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π generateSigner(umi)
    const mint = generateSigner(umi); 
    const mintAddress = mint.publicKey.toString();

    console.log(`[–®–ê–ì 1] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å Mint-–∞–∫–∫–∞—É–Ω—Ç: ${mintAddress}`);

    try {
        const transaction = createAndMint(umi, {
            mint,
            decimals: parsedDecimals,
            amount: parsedSupply, 
            
            // –í–ª–∞–¥–µ–ª–µ—Ü –∏ Authority –±–µ—Ä—É—Ç—Å—è –∏–∑ umi.identity, –∫–æ—Ç–æ—Ä—ã–π –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏
            tokenOwner: umi.identity.publicKey,
            authority: umi.identity, 
        });

        await transaction.sendAndConfirm(umi);

        console.log(`‚úÖ [–®–ê–ì 1] –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç—á–µ–∫–∞–Ω–µ–Ω. –ê–¥—Ä–µ—Å Mint: ${mintAddress}`);
        
        return { mint: mintAddress };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ createToken:", error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Mint-–∞–∫–∫–∞—É–Ω—Ç: ${error.message}`);
    }
}

export { createToken };